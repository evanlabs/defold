#! /usr/bin/env python

import sys, os

import waflib.Task, waflib.TaskGen, waflib.Options
from waflib.TaskGen import extension

sys.path.insert(0, "src")
import waf_gamesys

def configure(conf):
    pass

def build(bld):
    dirs = ['animationset/*',
            'buffer/*',
            'camera/*',
            'collection_proxy/*',
            'collision_object/*',
            'convex_shape/*',
            'emitter/*',
            'factory/*',
            'collection_factory/*',
            'font/*',
            'fragment_program/*',
            'gui/*',
            'input/*',
            'label/*',
            'light/*',
            'material/*',
            'mesh/*',
            'meshset/*',
            'model/*',
            'particlefx/*',
            'render/*',
            'render_script/*',
            'display_profiles/*',
            'resource/*',
            'script/*',
            'sound/*',
            'sprite/**',
            'tile/*',
            'texture/*',
            'textureset/*',
            'vertex_program/*',
            'window/*']

    exported_symbols = ['ResourceTypeGameObject',
                        'ResourceTypeCollection',
                        'ResourceTypeLua',
                        'ResourceTypeScript',
                        'ResourceProviderFile',
                        'ComponentTypeScript',
                        'ResourceTypeAnim',
                        'ComponentTypeAnim',
                        'ResourceTypeAnimationSet',
                        'ComponentTypeGui',
                        'ResourceTypeGui','ResourceTypeGuiScript',
                        'GraphicsAdapterNull']

    test_task_gen = bld.program(features = 'cxx cprogram test',
                                includes = '../../../src ../../../proto',
                                use = 'TESTMAIN DMGLFW GAMEOBJECT DDF RESOURCE PHYSICS RENDER GRAPHICS_GAMESYS_TEST SOCKET APP PROFILE_NULL SCRIPT LUA EXTENSION INPUT HID_NULL PARTICLE RIG GUI SOUND_NULL LIVEUPDATE DLIB gamesys',
                                exported_symbols = exported_symbols,
                                web_libs = ['library_sys.js', 'library_script.js'],
                                proto_gen_py = True,
                                content_root='../test',
                                source = bld.path.ant_glob('test_gamesys.cpp') + bld.path.ant_glob(dirs, excl=['**/*.ttf', '**/*.basis']),
                                target = 'test_gamesys')

    if bld.env.PLATFORM in ('x86_64-win32', 'x86_64-macos', 'x86_64-linux')  and not waflib.Options.options.with_vulkan:
        bld.recurse('fontview')
