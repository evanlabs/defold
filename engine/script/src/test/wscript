#! /usr/bin/env python

import waflib.Task, waflib.TaskGen
from waflib.TaskGen import extension
from waf_dynamo import new_copy_task, platform_supports_feature

new_copy_task('luascript', '.lua', '.luac')
new_copy_task('save_file', '.sav', '.savc')

def build(bld):
    flist = 'cxx test'
    if 'web' in bld.env['PLATFORM']:
        lib_dirs = {}
        lib_dirs['library_script.js'] = '../lib/js'
        bld.env['JS_LIB_PATHS'] = lib_dirs


    bld.stlib(features = 'c cxx',
              includes = '..',
              use = 'DLIB LUA script',
              target = 'test_script_private',
              source = 'test_script_private.cpp')

    web_libs = ['library_sys.js', 'library_script.js']
    libs = 'TESTMAIN SOCKET APP THREAD EXTENSION RESOURCE DDF DLIB PROFILE_NULL LUA script test_script_private'
    exported_symbols = ['ResourceProviderFile']

    common_src = ["test_script.cpp"]

    if not 'web' in bld.env['PLATFORM']:
        if platform_supports_feature(bld.env.PLATFORM, 'test_script_http', {}):
            bld.program(features = flist,
                                       includes = '..',
                                       use = libs,
                                       web_libs = web_libs,
                                       proto_gen_py = True,
                                       target = 'test_script_http',
                                       source = common_src + 'test_script_http.cpp test_http.lua test_http_timeout.lua'.split())

    test_script_ddf = bld.program(features = flist,
                                  includes = '..',
                                  use = libs,
                                  web_libs = web_libs,
                                  exported_symbols = exported_symbols,
                                  proto_gen_py = True,
                                  target = 'test_script_ddf',
                                  source = common_src + 'test_script_ddf.cpp test_ddf.proto'.split())

    test_script_msg = bld.program(features = flist,
                                        includes = '..',
                                        use = libs,
                                        web_libs = web_libs,
                                        proto_gen_py = True,
                                        target = 'test_script_msg',
                                        source = common_src + 'test_script_msg.cpp test_ddf.proto'.split())

    test_script_hash = bld.program(features = flist,
                                        includes = '..',
                                        use = libs,
                                        web_libs = web_libs,
                                        exported_symbols = exported_symbols,
                                        proto_gen_py = True,
                                        target = 'test_script_hash',
                                        source = common_src + 'test_script_hash.cpp test_hash.lua'.split())

    test_script_vmath = bld.program(features = flist,
                                     includes = '.. .',
                                     use = libs,
                                     web_libs = web_libs,
                                     exported_symbols = exported_symbols,
                                     proto_gen_py = True,
                                     target = 'test_script_vmath',
                                     source = common_src + 'test_script_vmath.cpp test_number.lua test_vector.lua test_vector3.lua test_vector4.lua test_quat.lua test_matrix4.lua'.split())

    script_table_features = flist + ' embed';
    test_script_table = bld.program(features = script_table_features,
                                     includes = '.. .',
                                     use = libs,
                                     web_libs = web_libs,
                                     exported_symbols = exported_symbols,
                                     proto_gen_py = True,
                                     embed_source = 'data/table_cos_v0.dat data/table_sin_v0.dat data/table_cos_v1.dat data/table_sin_v1.dat data/table_v818192.dat data/table_tstring_v1.dat data/table_tstring_v2.dat data/table_tstring_v3.dat',
                                     target = 'test_script_table',
                                     source = common_src + 'test_script_table.cpp test_script_table.lua'.split())

    test_script_table_log = bld.program(features = flist,
                                     includes = '.. .',
                                     use = libs,
                                     web_libs = web_libs,
                                     proto_gen_py = True,
                                     target = 'test_script_table_log',
                                     source = common_src + 'test_script_table_log.cpp'.split())

    test_script_timer = bld.program(features = flist,
                                     includes = '.. .',
                                     use = libs,
                                     web_libs = web_libs,
                                     exported_symbols = exported_symbols,
                                     proto_gen_py = True,
                                     target = 'test_script_timer',
                                     source = common_src + 'test_script_timer.cpp'.split())

    test_script_sys = bld.program(features = flist,
                                       includes = '..',
                                       use = libs,
                                       web_libs = web_libs,
                                       exported_symbols = exported_symbols,
                                       proto_gen_py = True,
                                       target = 'test_script_sys',
                                       source = common_src + 'test_script_sys.cpp test_sys.lua'.split())

    test_script = bld.program(features = flist,
                                        includes = '..',
                                        use = libs,
                                        web_libs = web_libs,
                                        exported_symbols = exported_symbols,
                                        proto_gen_py = True,
                                        target = 'test_script_lua',
                                        source = common_src + 'test_script_lua.cpp test_script_lua.lua test_script_coroutine.lua test_circular_ref_pprint.lua test_pprint_truncate.lua test_lua_callstack.lua'.split())

    test_script_module = bld.program(features = flist,
                                          includes = '..',
                                          use = libs,
                                          web_libs = web_libs,
                                          exported_symbols = exported_symbols,
                                          proto_gen_py = True,
                                          target = 'test_script_module',
                                          source = common_src + 'test_script_module.cpp test_module.lua test_module_missing.lua'.split())

    test_script_json = bld.program(features = flist,
                                       includes = '..',
                                       use = libs,
                                       web_libs = web_libs,
                                       exported_symbols = exported_symbols,
                                       proto_gen_py = True,
                                       target = 'test_script_json',
                                       source = common_src + 'test_script_json.cpp test_json.lua'.split())

    test_script_zlib = bld.program(features = flist,
                                       includes = '..',
                                       use = libs,
                                       web_libs = web_libs,
                                       exported_symbols = exported_symbols,
                                       proto_gen_py = True,
                                       target = 'test_script_zlib',
                                       source = common_src + 'test_script_zlib.cpp test_zlib.lua'.split())

    test_script_image = bld.program(features = flist,
                                       includes = '..',
                                       use = libs,
                                       web_libs = web_libs,
                                       exported_symbols = exported_symbols,
                                       proto_gen_py = True,
                                       target = 'test_script_image',
                                       source = common_src + 'test_script_image.cpp test_image.lua'.split())

    test_script_user_type = bld.program(features = flist,
                                       includes = '..',
                                       use = libs,
                                       web_libs = web_libs,
                                       exported_symbols = exported_symbols,
                                       proto_gen_py = True,
                                       target = 'test_script_user_type',
                                       source = common_src + 'test_script_user_type.cpp'.split())

    if platform_supports_feature(bld.env.PLATFORM, 'luasocket', {}):
        bld.program(features = flist,
                        includes = '..',
                        use = libs,
                        web_libs = web_libs,
                        exported_symbols = exported_symbols,
                        proto_gen_py = True,
                        target = 'test_script_luasocket',
                        source = common_src + 'test_script_luasocket.cpp test_luasocket.lua'.split())

    test_script_bitop = bld.program(features = flist,
                                       includes = '..',
                                       use = libs,
                                       web_libs = web_libs,
                                       exported_symbols = exported_symbols,
                                       proto_gen_py = True,
                                       target = 'test_script_bitop',
                                       source = common_src + 'test_script_bitop.cpp test_bitop.lua'.split())


